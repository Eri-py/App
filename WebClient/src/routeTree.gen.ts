/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AppSearchRouteImport } from './routes/_app/search'
import { Route as AppProfileRouteImport } from './routes/_app/profile'
import { Route as AppMessagesRouteImport } from './routes/_app/messages'
import { Route as AppCreateRouteImport } from './routes/_app/create'

const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppSearchRoute = AppSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AppRoute,
} as any)
const AppProfileRoute = AppProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppRoute,
} as any)
const AppMessagesRoute = AppMessagesRouteImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => AppRoute,
} as any)
const AppCreateRoute = AppCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/create': typeof AppCreateRoute
  '/messages': typeof AppMessagesRoute
  '/profile': typeof AppProfileRoute
  '/search': typeof AppSearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/create': typeof AppCreateRoute
  '/messages': typeof AppMessagesRoute
  '/profile': typeof AppProfileRoute
  '/search': typeof AppSearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_app/create': typeof AppCreateRoute
  '/_app/messages': typeof AppMessagesRoute
  '/_app/profile': typeof AppProfileRoute
  '/_app/search': typeof AppSearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/_app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/create'
    | '/messages'
    | '/profile'
    | '/search'
    | '/auth/login'
    | '/auth/register'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/create'
    | '/messages'
    | '/profile'
    | '/search'
    | '/auth/login'
    | '/auth/register'
    | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_app/create'
    | '/_app/messages'
    | '/_app/profile'
    | '/_app/search'
    | '/auth/login'
    | '/auth/register'
    | '/_app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/search': {
      id: '/_app/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AppSearchRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/profile': {
      id: '/_app/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/messages': {
      id: '/_app/messages'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof AppMessagesRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/create': {
      id: '/_app/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof AppCreateRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppCreateRoute: typeof AppCreateRoute
  AppMessagesRoute: typeof AppMessagesRoute
  AppProfileRoute: typeof AppProfileRoute
  AppSearchRoute: typeof AppSearchRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppCreateRoute: AppCreateRoute,
  AppMessagesRoute: AppMessagesRoute,
  AppProfileRoute: AppProfileRoute,
  AppSearchRoute: AppSearchRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
